# -*- coding: utf-8 -*-
"""dicoding - course 3 tugas akhir

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RvvDKHrYSWS1x9SThPpIb9hX8P_O_Em3

### **Submission Dicoding Tugas Akhir**

Nama: Nico Marcelino

Email: nico.the4thkid@gmail.com
"""

import tensorflow as tf

!wget --no-check-certificate \
      https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
-O /tmp/rockpaperscissors.zip

import zipfile, os

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

!pip install split-folders
import splitfolders

!rm -rf ../tmp/rockpaperscissors/rps-cv-images

splitfolders.ratio("../tmp/rockpaperscissors", output="../tmp/rps-split",
   seed=1337, ratio=(.6, .4), group_prefix=None, move=False)

base_dir = '/tmp/rps-split'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

os.listdir('/tmp/rps-split/train')

os.listdir('/tmp/rps-split/val')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    rotation_range = 20,
                    horizontal_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

val_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    rotation_range = 20,
                    horizontal_flip = True,
                    vertical_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
    train_dir, # directory data train
    target_size = (150, 150),
    batch_size = 30,
    class_mode = 'categorical'
)

validation_generator = val_datagen.flow_from_directory(
    validation_dir, # directory data test
    target_size = (150, 150),
    batch_size = 30,
    class_mode = 'categorical'
)

# callback function
# cb = tf.keras.callbacks.EarlyStopping(monitor="val_loss", patience=4, min_delta=0.2, restore_best_weights=True)
class earlystop(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):

    if((logs.get('accuracy') > 0.96) and (logs.get('val_loss') < logs.get('loss'))):
      print("Accuracy has reached over 96% and losses are low enough.")
      self.model.stop_training = True

callbacks = earlystop()

# membuat convolutional neural network    
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

# mengecek struktur dari cnn
model.summary()

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.keras.optimizers.Adamax(),
    metrics = ['accuracy']
)

# latih model dengan model.fit
model.fit(
    train_generator,
    steps_per_epoch = 40, # berapa batch yg akan di-execute per epoch
    epochs = 30, # ditambah jika model belum optimal
    validation_data = validation_generator, # menampilkan accuracy tes data validasi
    validation_steps = 30, # berapa batch yg akan di-execute per epoch
    verbose = 2,
    callbacks = [callbacks]
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
     
uploaded = files.upload()
     
for fn in uploaded.keys():
     
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150, 150))
     
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size=10)  
  print(fn)
  print(classes)
  if classes[0][2]>=1:
    print('Gunting')                                 
  elif classes[0][1]>=1:
    print('Batu')                                   
  elif classes[0][0]>=1:
    print('Kertas')                                
  else:
    print('Unknown')